include formatting_functions.pug

.agencies
    each timetablePageGroup in getAgencyTimetableGroups(timetablePages, agencies)
        h2= `${formatAgencyName(timetablePageGroup.agency)} Routes`
        .timetable-pages
            each timetablePage in timetablePageGroup.timetablePages
                a.timetable-page(href=`${timetablePage.relativePath}`)
                    span.timetable-label= timetablePage.timetable_page_label
                    each route in _.uniqBy(_.flatMap(timetablePage.consolidatedTimetables, timetable => timetable.routes), 'route_id')
                        span.route(style=`background-color: #${route.route_color}; color: #${route.route_text_color};`)= route.route_short_name
                    span.timetable-days= timetablePage.dayList

    #map-container.overview-map

    script.
        var geojson = !{JSON.stringify(geojson) || '\'\''};

        function mapSetup(map) {
            var positions = {};

            setInterval(function () {
                fetch("#{config.realtimeUrl}/gtfs-rt.json").then(function (response) {
                    return response.json();
                }).then(function (json) {
                    json.vehicle_positions.forEach(function (vehicle_position) {
                        var coordinate = new mapkit.Coordinate(
                            vehicle_position.position.latitude, vehicle_position.position.longitude
                        );

                        if (positions[vehicle_position.vehicle.id]) {
                            positions[vehicle_position.vehicle.id].annotation.coordinate = coordinate;
                        } else {
                            var annotation = new mapkit.ImageAnnotation(coordinate, {
                                url: { 1: "img/bus.png", 2: "img/bus@2x.png", 3: "img/bus@3x.png" },
                                title: vehicle_position.vehicle.label,
                                subtitle: vehicle_position.vehicle.license_plate
                            });
                            map.addAnnotation(annotation);
                            positions[vehicle_position.vehicle.id] = {
                                position_id: vehicle_position.id,
                                vehicle_id: vehicle_position.vehicle.id,
                                annotation: annotation
                            }
                        }
                    });
                    var position_ids = json.vehicle_positions.map(function (position) {
                        return position.vehicle.id;
                    });
                    Object.keys(positions).filter(function (id) {
                        return !position_ids.includes(id);
                    }).forEach(function (position) {
                        var oldPosition = positions[position];
                        map.removeAnnotation(oldPosition.annotation);
                        delete positions[position];
                    });
                }).catch(function (error) {
                    console.error(error);
                });
            }, 1000);
        }